# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'klaviyo'
version: '1.0.0'
config-version: 2
require-dbt-version: [">=1.0.0", "<2.0.0"]
profile: edm_data_transformation

#for snowflake
# vars:
#   raw_database: "EDM" #equivalent to project_id in BigQuery
#     # Example Database name
#   raw_schema: "EDM" #equivalent to dataset in BigQuery
#     # Example Schema name

#for bigquery
vars:
  raw_database: "edm-saras" #equivalent to project_id in BigQuery
    # Example Database name
  raw_schema: "EDM_Daton" #equivalent to dataset in BigQuery
    # Example Schema name

  get_brandname_from_tablename_flag: True
  # if get_brandname_from_tablename_flag = True, position of brand name in the daton integration name
  brandname_position_in_tablename: 0
  # if get_brandname_from_tablename_flag = False, provide the brand name to be populated in the table
  default_brandname: ""

  get_storename_from_tablename_flag: True    
  # if get_storename_from_tablename_flag = True, position of store name in the daton integration name
  storename_position_in_tablename: 1
  # if get_storename_from_tablename_flag = False, provide the store name to be populated in the table
  default_storename: ""

  currency_conversion_flag: True
  timezone_conversion_flag: False

  # Variables used for dbt-tests
  'dbt_date:time_zone': 'America/Los_Angeles'

      # Above are Example entries for raw table level input offset hours

  KlaviyoBouncedEmail: True
  KlaviyoClickedEmail: True
  KlaviyoClickedSMS: True
  KlaviyoConsentedToReceiveSMS: True
  KlaviyoDroppedEmail: True
  KlaviyoFailedToDeliverSMS: True
  KlaviyoFlowActions: True
  KlaviyoFlowMessages: True
  KlaviyoFlows: True
  KlaviyoLists: True
  KlaviyoMarkedEmailAsSpam: True
  KlaviyoMetrics: True
  KlaviyoCampaigns: True
  KlaviyoOpenedEmail: True
  KlaviyoOpenedPush: True
  KlaviyoPlacedOrder: True
  KlaviyoReceivedEmail: True
  KlaviyoReceivedPush: True
  KlaviyoReceivedSMS: True
  KlaviyoSegments: True
  KlaviyoSentSMS: True
  KlaviyoSubscribedToList: True
  KlaviyoUnsubscribed: True
  KlaviyoUnsubscribedFromList: True

  klaviyo_bounced_email_lookback: 2592000000
  klaviyo_campaigns_lookback: 2592000000
  klaviyo_clicked_email_lookback: 2592000000
  klaviyo_clicked_sms_lookback: 2592000000
  klaviyo_consented_to_receive_sms_lookback: 2592000000
  klaviyo_dropped_email_lookback: 2592000000
  klaviyo_failed_to_deliver_sms_lookback: 2592000000
  klaviyo_flow_actions_lookback: 2592000000
  klaviyo_flow_messages_lookback: 2592000000
  klaviyo_flows_lookback: 2592000000
  klaviyo_lists_lookback: 2592000000
  klaviyo_marked_email_as_spam_lookback: 2592000000
  klaviyo_metrics_lookback: 2592000000
  klaviyo_opened_email_lookback: 2592000000
  klaviyo_opened_push_lookback: 2592000000
  klaviyo_placed_order_lookback: 2592000000
  klaviyo_received_email_lookback: 2592000000
  klaviyo_received_push_lookback: 2592000000
  klaviyo_received_sms_lookback: 2592000000
  klaviyo_segments_lookback: 2592000000
  klaviyo_sent_sms_lookback: 2592000000
  klaviyo_subscribed_to_list_lookback: 2592000000
  klaviyo_unsubscribed_lookback: 2592000000
  klaviyo_unsubscribed_from_list_lookback: 2592000000

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.

models:
  Klaviyo:
    Klaviyo:
      +schema: stg_klaviyo